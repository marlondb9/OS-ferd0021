import "string"
#pragma link("mega65hyper.ld")

// Some definitions of addresses and special values that this program uses
const char* RASTER = 0xd012;
const char* VIC_MEMORY = 0xd018;
const char* SCREEN = 0x0400;
const char* BGCOL = 0xd021;
const char* COLS = 0xd800;
const char BLACK = 0;
const char WHITE = 1;

// Some text to display
char[] MESSAGE = "checkpoint 2.3 ferd0021";

void main(){
// Initialize screen memory, and select correct font
*VIC_MEMORY = 0x14;
// Fill the screen with spaces
memset(SCREEN, ' ', 40*25);
// Set the colour of every character on the screen to white
memset(COLS, WHITE, 40*25);
// Print the "hello world!" message
char* sc = SCREEN+40; // Display it one line down on the screen
char* msg = MESSAGE; // The message to display
// A simple copy routine to copy the string
while(*msg) {
     *sc++ = *msg++;
}
// Loop forever showing two white lines as raster bars
while(true) {
  if(*RASTER==54 || *RASTER==66) {
        *BGCOL = WHITE;
} else {
     *BGCOL = BLACK;
}
}
}
// Here are a couple sample SYSCALL handlers that just display a character on the screen

//void syscall00() {
  //    *(SCREEN+79) = '>';
//exit_hypervisor();
//}

void syscall1() {
    *(SCREEN+79) = '<';
exit_hypervisor();
}

void syscall2() {
    *(SCREEN+78) = '<';
exit_hypervisor();
}

void syscall3() {
    *(SCREEN+77) = '<';
exit_hypervisor();
}

void syscall4() {
    *(SCREEN+76) = '<';
exit_hypervisor();
}

void syscall5() {
    *(SCREEN+75) = '<';
exit_hypervisor();
}

void syscall6() {
    *(SCREEN+74) = '<';
exit_hypervisor();
}

void syscall7() {
    *(SCREEN+73) = '<';
exit_hypervisor();
}

void syscall8() {
    *(SCREEN+72) = '<';
exit_hypervisor();
}

void syscall9() {
    *(SCREEN+71) = '<';
exit_hypervisor();
}



void syscall10() {
    *(SCREEN+70) = '<';
exit_hypervisor();
}

void syscall13() {
    *(SCREEN+69) = '<';
exit_hypervisor();
}

void syscall14() {
    *(SCREEN+68) = '<';
exit_hypervisor();
}

void syscall15() {
    *(SCREEN+67) = '<';
exit_hypervisor();
}

void syscall16() {
    *(SCREEN+66) = '<';
exit_hypervisor();
}

void syscall17() {
    *(SCREEN+65) = '<';
exit_hypervisor();
}

void syscall18() {
    *(SCREEN+64) = '<';
exit_hypervisor();
}

void syscall19() {
    *(SCREEN+63) = '<';
exit_hypervisor();
}


void syscall20() {
    *(SCREEN+62) = '<';
exit_hypervisor();
}

void syscall21() {
    *(SCREEN+61) = '<';
exit_hypervisor();
}

void syscall22() {
    *(SCREEN+60) = '<';
exit_hypervisor();
}

void syscall23() {
    *(SCREEN+59) = '<';
exit_hypervisor();
}

void syscall24() {
    *(SCREEN+58) = '<';
exit_hypervisor();
}

void syscall25() {
    *(SCREEN+57) = '<';
exit_hypervisor();
}

void syscall26() {
    *(SCREEN+56) = '<';
exit_hypervisor();
}

void syscall27() {
    *(SCREEN+55) = '<';
exit_hypervisor();
}

void syscall28() {
    *(SCREEN+54) = '<';
exit_hypervisor();
}

void syscall29() {
    *(SCREEN+53) = '<';
exit_hypervisor();
}

void syscall30() {
    *(SCREEN+52) = '<';
exit_hypervisor();
}
void syscall31() {
    *(SCREEN+51) = '<';
exit_hypervisor();
}
void syscall32() {
    *(SCREEN+50) = '<';
exit_hypervisor();
}
void syscall33() {
    *(SCREEN+49) = '<';
exit_hypervisor();
}
void syscall34() {
    *(SCREEN+48) = '<';
exit_hypervisor();
}
void syscall35() {
    *(SCREEN+47) = '<';
exit_hypervisor();
}
void syscall36() {
    *(SCREEN+46) = '<';
exit_hypervisor();
}
void syscall37() {
    *(SCREEN+45) = '<';
exit_hypervisor();
}
void syscall38() {
    *(SCREEN+44) = '<';
exit_hypervisor();
}
void syscall39() {
    *(SCREEN+43) = '<';
exit_hypervisor();
}
void syscall40() {
    *(SCREEN+42) = '<';
exit_hypervisor();
}
void syscall41() {
    *(SCREEN+41) = '<';
exit_hypervisor();
}
void syscall42() {
    *(SCREEN+40) = '<';
exit_hypervisor();
}
void syscall43() {
    *(SCREEN+39) = '<';
exit_hypervisor();
}
void syscall44() {
    *(SCREEN+38) = '<';
exit_hypervisor();
}
void syscall45() {
    *(SCREEN+37) = '<';
exit_hypervisor();
}
void syscall46() {
    *(SCREEN+36) = '<';
exit_hypervisor();
}
void syscall47() {
    *(SCREEN+35) = '<';
exit_hypervisor();
}
void syscall48() {
    *(SCREEN+34) = '<';
exit_hypervisor();
}
void syscall49() {
    *(SCREEN+33) = '<';
exit_hypervisor();
}
void syscall50() {
    *(SCREEN+32) = '<';
exit_hypervisor();
}
void syscall51() {
    *(SCREEN+31) = '<';
exit_hypervisor();
}
void syscall52() {
    *(SCREEN+30) = '<';
exit_hypervisor();
}
void syscall53() {
    *(SCREEN+29) = '<';
exit_hypervisor();
}
void syscall54() {
    *(SCREEN+28) = '<';
exit_hypervisor();
}
void syscall55() {
    *(SCREEN+27) = '<';
exit_hypervisor();
}
void syscall56() {
    *(SCREEN+26) = '<';
exit_hypervisor();
}
void syscall57() {
    *(SCREEN+25) = '<';
exit_hypervisor();
}
void syscall58() {
    *(SCREEN+24) = '<';
exit_hypervisor();
}
void syscall59() {
    *(SCREEN+23) = '<';
exit_hypervisor();
}
void syscall60() {
    *(SCREEN+22) = '<';
exit_hypervisor();
}
void syscall61() {
    *(SCREEN+21) = '<';
exit_hypervisor();
}
void syscall62() {
    *(SCREEN+20) = '<';
exit_hypervisor();
}
void syscall63() {
    *(SCREEN+19) = '<';
exit_hypervisor();
}
void syscall64() {
    *(SCREEN+18) = '<';
exit_hypervisor();
}

void RESET() {
    *(SCREEN+17) = '<';
exit_hypervisor();
}
void PAGEFAULT() {
    *(SCREEN+16) = '<';
exit_hypervisor();
}
void RESTORKEY() {
    *(SCREEN+15) = '<';
exit_hypervisor();
}
void ALTTABKEY() {
    *(SCREEN+14) = '<';
exit_hypervisor();
}
void VF011RD() {
    *(SCREEN+13) = '<';
exit_hypervisor();
}

void VF011WR() {
    *(SCREEN+12) = '<';
exit_hypervisor();
}


// Now we select the SYSCALL segment to hold the SYSCALL/trap entry point table.
#pragma data_seg(Syscall)

//The Structure of each point is JMP {handler address} + NOP.
// We have a char (xjmp) to hold the opcode for the JMP instruction,
//and then put the address of the SYSCALL/trap handler in the next
//two points as a pointer, and end with the NOP instruction opcode
struct SysCall {
     char xjmp;   // Holds $4C, the JMP $nnnn opcode
     void()* syscall;  // Holds handler address, will be the target of the JMP
     char xnop;   // Holds $EA, the NOP opcode
};

// To save writing 0x4C and 0xEA all the time, we define them as constants
const char JMP = 0x4c;
const char NOP = 0xea;

// Now we can have a nice tavle of up to 64 SYSCALL handlers expressed
// in a fairly readable and easy format.
// Each line is an instance of the struct SysCall from above, with the JMP
// opcode value, the address of the handler routine and the NOP opcode value.
export struct SysCall[] SYSCALLS = {
{ JMP, &syscall1, NOP },
{ JMP, &syscall2, NOP },
{ JMP, &syscall3, NOP },
{ JMP, &syscall4, NOP },
{ JMP, &syscall5, NOP },
{ JMP, &syscall6, NOP },
{ JMP, &syscall7, NOP },
{ JMP, &syscall8, NOP },
{ JMP, &syscall9, NOP },
{ JMP, &syscall10, NOP },
{ JMP, &syscall13, NOP },
{ JMP, &syscall14, NOP },
{ JMP, &syscall15, NOP },
{ JMP, &syscall16, NOP },
{ JMP, &syscall17, NOP },
{ JMP, &syscall18, NOP },
{ JMP, &syscall19, NOP },
{ JMP, &syscall20, NOP },
{ JMP, &syscall21, NOP },
{ JMP, &syscall22, NOP },
{ JMP, &syscall23, NOP },
{ JMP, &syscall24, NOP },
{ JMP, &syscall25, NOP },
{ JMP, &syscall26, NOP },
{ JMP, &syscall27, NOP },
{ JMP, &syscall28, NOP },
{ JMP, &syscall29, NOP },
{ JMP, &syscall30, NOP },
{ JMP, &syscall31, NOP },
{ JMP, &syscall32, NOP },
{ JMP, &syscall33, NOP },
{ JMP, &syscall34, NOP },
{ JMP, &syscall35, NOP },
{ JMP, &syscall36, NOP },
{ JMP, &syscall37, NOP },
{ JMP, &syscall38, NOP },
{ JMP, &syscall39, NOP },
{ JMP, &syscall40, NOP },
{ JMP, &syscall41, NOP },
{ JMP, &syscall42, NOP },
{ JMP, &syscall43, NOP },
{ JMP, &syscall44, NOP },
{ JMP, &syscall45, NOP },
{ JMP, &syscall46, NOP },
{ JMP, &syscall47, NOP },
{ JMP, &syscall48, NOP },
{ JMP, &syscall49, NOP },
{ JMP, &syscall50, NOP },
{ JMP, &syscall51, NOP },
{ JMP, &syscall52, NOP },
{ JMP, &syscall53, NOP },
{ JMP, &syscall54, NOP },
{ JMP, &syscall55, NOP },
{ JMP, &syscall56, NOP },
{ JMP, &syscall57, NOP },
{ JMP, &syscall58, NOP },
{ JMP, &syscall59, NOP },
{ JMP, &syscall60, NOP },
{ JMP, &syscall61, NOP },
{ JMP, &syscall62, NOP },
{ JMP, &syscall63, NOP },
{ JMP, &syscall64, NOP }

};

void exit_hypervisor()
{
//TRIGGER EXIT FROM hYPERVISOR MODE
*(unsigned char *)$D67F = $01;

}


// In this example we had only two SYSCALLs defined, so rather than having
// another 62 lines, we can just ask KickC to make the TRAP table begin
// at the next multiple of $100, i.e., at $8100.
export align(0x100) struct SysCall[] SYSCALL_RESET = {
     { JMP, &main, NOP }
};




